// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package stores is a generated GoMock package.
package stores

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	models "github.com/go-training/movie-management-system-2023/internels/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieStorer is a mock of MovieStorer interface.
type MockMovieStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMovieStorerMockRecorder
}

// MockMovieStorerMockRecorder is the mock recorder for MockMovieStorer.
type MockMovieStorerMockRecorder struct {
	mock *MockMovieStorer
}

// NewMockMovieStorer creates a new mock instance.
func NewMockMovieStorer(ctrl *gomock.Controller) *MockMovieStorer {
	mock := &MockMovieStorer{ctrl: ctrl}
	mock.recorder = &MockMovieStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieStorer) EXPECT() *MockMovieStorerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMovieStorer) Delete(ctx *gofr.Context, movieID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMovieStorerMockRecorder) Delete(ctx, movieID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMovieStorer)(nil).Delete), ctx, movieID)
}

// Get mocks base method.
func (m *MockMovieStorer) Get(ctx *gofr.Context, movID int) (models.Movie, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, movID)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockMovieStorerMockRecorder) Get(ctx, movID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMovieStorer)(nil).Get), ctx, movID)
}

// GetAll mocks base method.
func (m *MockMovieStorer) GetAll(ctx *gofr.Context) ([]models.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]models.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMovieStorerMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMovieStorer)(nil).GetAll), ctx)
}

// Post mocks base method.
func (m *MockMovieStorer) Post(ctx *gofr.Context, mov *models.Movie) (models.Movie, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, mov)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Post indicates an expected call of Post.
func (mr *MockMovieStorerMockRecorder) Post(ctx, mov interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockMovieStorer)(nil).Post), ctx, mov)
}

// Update mocks base method.
func (m *MockMovieStorer) Update(ctx *gofr.Context, movieID int, upMov models.UpdateMovie) (models.Movie, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, movieID, upMov)
	ret0, _ := ret[0].(models.Movie)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockMovieStorerMockRecorder) Update(ctx, movieID, upMov interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMovieStorer)(nil).Update), ctx, movieID, upMov)
}
